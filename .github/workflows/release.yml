name: Build and Release PDFs

on:
  push:
    branches:
      - master

permissions:
  contents: write

jobs:
  # Job to build complete matrix from CSV
  build-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.build_matrix.outputs.matrix }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Build matrix
        id: build_matrix
        run: |
          MATRIX_JSON=$(python3 .github/workflows/build_matrix.py)
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT
          echo "Built matrix with $(echo ${MATRIX_JSON} | jq 'length') items"

  build-and-release:
    runs-on: ubuntu-latest
    needs: build-matrix
    strategy:
      matrix:
        include: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'

      - name: Install Python Dependencies
        run: pip install -r requirements.txt

      - name: Run Python Compiler
        run: |
          if [ "${{ matrix.type }}" = "all" ]; then
            python3 main.py
            # Also generate Moodle quiz bank for the complete compilation
            python3 main.py --format moodle --lang-order sv en
          elif [ "${{ matrix.type }}" = "subject" ]; then
            # Get subject name for title using helper script
            SUBJECT_NAME=$(python3 .github/workflows/get_subject_title.py ${{ matrix.value }})
            python3 main.py --subject ${{ matrix.value }} --title "$SUBJECT_NAME"
          elif [ "${{ matrix.type }}" = "chapter" ]; then
            # Get chapter name for title using helper script
            CHAPTER_NAME=$(python3 .github/workflows/get_chapter_title.py ${{ matrix.value }})
            python3 main.py --chapter ${{ matrix.value }} --title "$CHAPTER_NAME"
          elif [ "${{ matrix.type }}" = "tag" ]; then
            python3 main.py --tag "${{ matrix.value }}" --title "Tag: ${{ matrix.value }}"
          fi

      - name: Determine LaTeX file
        id: latex_file
        run: |
          if [ "${{ matrix.type }}" = "all" ]; then
            echo "latex_file=output.tex" >> $GITHUB_OUTPUT
            echo "pdf_name=old-exam-questions-all.pdf" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.type }}" = "subject" ]; then
            echo "latex_file=output_$(echo ${{ matrix.value }} | tr '[:upper:]' '[:lower:]').tex" >> $GITHUB_OUTPUT
            echo "pdf_name=old-exam-questions-${{ matrix.value }}.pdf" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.type }}" = "chapter" ]; then
            echo "latex_file=output_chapter_${{ matrix.value }}.tex" >> $GITHUB_OUTPUT
            echo "pdf_name=old-exam-questions-chapter-${{ matrix.value }}.pdf" >> $GITHUB_OUTPUT
          elif [ "${{ matrix.type }}" = "tag" ]; then
            SAFE_TAG=$(echo "${{ matrix.value }}" | tr ' ' '_' | tr '/' '_' | tr '\\' '_')
            echo "latex_file=output_tag_${SAFE_TAG}.tex" >> $GITHUB_OUTPUT
            echo "pdf_name=old-exam-questions-tag-${SAFE_TAG}.pdf" >> $GITHUB_OUTPUT
            echo "safe_tag=${SAFE_TAG}" >> $GITHUB_OUTPUT
          fi

      - name: Compile LaTeX Document
        uses: xu-cheng/latex-action@v3
        with:
          root_file: ${{ steps.latex_file.outputs.latex_file }}

      - name: Rename PDF
        run: |
          if [ "${{ matrix.type }}" = "all" ]; then
            mv output.pdf "${{ steps.latex_file.outputs.pdf_name }}"
          elif [ "${{ matrix.type }}" = "subject" ]; then
            mv "output_$(echo ${{ matrix.value }} | tr '[:upper:]' '[:lower:]').pdf" "${{ steps.latex_file.outputs.pdf_name }}"
          elif [ "${{ matrix.type }}" = "chapter" ]; then
            mv "output_chapter_${{ matrix.value }}.pdf" "${{ steps.latex_file.outputs.pdf_name }}"
          elif [ "${{ matrix.type }}" = "tag" ]; then
            LATEX_FILE="${{ steps.latex_file.outputs.latex_file }}"
            PDF_FILE="${LATEX_FILE%.tex}.pdf"
            mv "$PDF_FILE" "${{ steps.latex_file.outputs.pdf_name }}"
          fi

      - name: Upload PDF as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: pdf-${{ matrix.type }}-${{ matrix.value }}
          path: ${{ steps.latex_file.outputs.pdf_name }}

      - name: Upload Moodle XML as Artifact (for all compilation only)
        if: matrix.type == 'all'
        uses: actions/upload-artifact@v4
        with:
          name: moodle-xml-all
          path: moodle_quiz.xml

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Extract Short Commit SHA
        id: short_sha
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "SHORT_SHA=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: files/

      - name: Prepare release files
        run: |
          mkdir -p release
          find files/ -name "*.pdf" -exec cp {} release/ \;
          # Copy Moodle XML file if it exists
          if [ -d "files" ] && [ -f "files/moodle_quiz.xml" ]; then
            cp files/moodle_quiz.xml release/moodle_quiz.xml
            echo "Added Moodle quiz XML to release"
          fi
          # Rename the ALL file to a simpler name
          if [ -f "release/old-exam-questions-all.pdf" ]; then
            mv "release/old-exam-questions-all.pdf" "release/old-exam-questions.pdf"
          fi
          # Rename subject files to not have old-exam-questions- prefix
          cd release
          for file in old-exam-questions-[A-Z]*.pdf; do
            if [ -f "$file" ] && [ "$file" != "old-exam-questions.pdf" ]; then
              new_name=$(echo "$file" | sed 's/old-exam-questions-//')
              mv "$file" "$new_name"
              echo "Renamed $file to $new_name"
            fi
          done
          # Rename chapter files to have a simpler name
          for file in old-exam-questions-chapter-*.pdf; do
            if [ -f "$file" ]; then
              new_name=$(echo "$file" | sed 's/old-exam-questions-//')
              mv "$file" "$new_name"
              echo "Renamed $file to $new_name"
            fi
          done
          # Rename tag files to have a simpler name
          for file in old-exam-questions-tag-*.pdf; do
            if [ -f "$file" ]; then
              new_name=$(echo "$file" | sed 's/old-exam-questions-//')
              mv "$file" "$new_name"
              echo "Renamed $file to $new_name"
            fi
          done
          cd ..
          ls -la release/

      - name: Create GitHub Release and Upload PDFs
        uses: softprops/action-gh-release@v2
        with:
          tag_name: b-${{ steps.short_sha.outputs.SHORT_SHA }}
          release_name: b-${{ steps.short_sha.outputs.SHORT_SHA }}
          body: |
            This is a release of exam question documents built from commit ${{ github.sha }}.

            This release includes the following PDFs:
            - `old-exam-questions.pdf`: A single document containing all subjects.
            - `[SUBJECT].pdf`: A separate document for each individual subject (e.g., `AI.pdf`, `DBS.pdf`).
            - `chapter-[X].pdf`: A separate document for each individual chapter (e.g., `chapter-0.pdf`, `chapter-1.pdf`).
            - `tag-[TAG].pdf`: A separate document for each tag in the question bank (if tags exist).

            This release also includes:
            - `moodle_quiz.xml`: A Moodle quiz bank export containing all questions in Swedish-English order for import into Moodle.
          files: |
            release/*.pdf
            release/*.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
